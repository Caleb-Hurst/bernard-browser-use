name: Summarize Issue and Linked PRs in Project Review

on:
  workflow_dispatch:

jobs:
  summarize:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
      pull-requests: read
    steps:
      - name: Install prerequisites
        run: |
          sudo apt-get update
          sudo apt-get install -y gh jq

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Find issues in Review status
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PROJECT_ID="PVT_kwHOBtn0hM4BEg5v"
          REVIEW_OPTION_ID="df73e18b"
          echo "---- Running GraphQL query to fetch Project items ----"
          gh api graphql -f query='
            query {
              node(id: "'$PROJECT_ID'") {
                ... on ProjectV2 {
                  items(first: 100) {
                    nodes {
                      content {
                        ... on Issue { number }
                      }
                      fieldValues(first: 20) {
                        nodes {
                          ... on ProjectV2ItemFieldSingleSelectValue { optionId }
                        }
                      }
                    }
                  }
                }
              }
            }
          ' > items.json
          echo "---- Extracting issue numbers in Review status ----"
          ISSUE_NUMBERS=$(jq -r --arg REVIEW_OPTION_ID "$REVIEW_OPTION_ID" '
            .data.node.items.nodes[]
            | select(.fieldValues.nodes[]?
                | select(.optionId == $REVIEW_OPTION_ID))
            | .content.number
          ' items.json | xargs)
          echo "Extracted ISSUE_NUMBERS: '$ISSUE_NUMBERS'"
          echo "ISSUE_NUMBERS=$ISSUE_NUMBERS" >> $GITHUB_ENV

      - name: Summarize with OpenAI and comment
        if: env.ISSUE_NUMBERS != ''
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          # DEBUG: Check if OPENAI_API_KEY is available and not empty
          if [ -z "$OPENAI_API_KEY" ]; then
            echo "ERROR: OPENAI_API_KEY is not set or is empty!"
            printenv  # WARNING: this will redact secrets, but shows env is loaded
            exit 1
          else
            echo "OPENAI_API_KEY is set (length: ${#OPENAI_API_KEY}, first 4 chars: ${OPENAI_API_KEY:0:4})"
          fi

          REPO="bernardhealth/bernard-browser-use"
          for ISSUE_NUMBER in $ISSUE_NUMBERS; do
            LABELS=$(gh issue view "$ISSUE_NUMBER" --repo "$REPO" --json labels --jq '.labels[].name')
            if echo "$LABELS" | grep -q '^copilot-reviewed$'; then
              echo "Issue #$ISSUE_NUMBER already summarized, skipping."
              continue
            fi
            ISSUE_TITLE=$(gh issue view "$ISSUE_NUMBER" --repo "$REPO" --json title --jq '.title')
            ISSUE_BODY=$(gh issue view "$ISSUE_NUMBER" --repo "$REPO" --json body --jq '.body')
            PRS=$(gh pr list --repo "$REPO" --search "#$ISSUE_NUMBER" --json number --jq '.[].number')
            PR_SUMMARIES=""
            for PR in $PRS; do
              PR_TITLE=$(gh pr view "$PR" --repo "$REPO" --json title --jq '.title')
              PR_BODY=$(gh pr view "$PR" --repo "$REPO" --json body --jq '.body')
              PR_SUMMARIES="$PR_SUMMARIES\nPR #$PR: $PR_TITLE\n$PR_BODY\n"
            done

            # Additional debugging for prompt and summaries
            echo "DEBUG: ISSUE_NUMBER=$ISSUE_NUMBER"
            echo "DEBUG: ISSUE_TITLE=$ISSUE_TITLE"
            echo "DEBUG: ISSUE_BODY=$ISSUE_BODY"
            echo -e "DEBUG: PR_SUMMARIES=$PR_SUMMARIES"

            # Concise prompt and only mention PRs if present
            if [ -z "$PR_SUMMARIES" ]; then
              PROMPT="Summarize the following GitHub issue in as few words as possible for a project changelog:\n\nIssue #$ISSUE_NUMBER: $ISSUE_TITLE\n\n$ISSUE_BODY"
            else
              PROMPT="Summarize the following GitHub issue and all of its linked PRs in as few words as possible for a project changelog. If there are multiple PRs, summarize them together concisely:\n\nIssue #$ISSUE_NUMBER: $ISSUE_TITLE\n\n$ISSUE_BODY\n\n$PR_SUMMARIES"
            fi

            DATA=$(jq -n \
              --arg prompt "$PROMPT" \
              '{
                model: "gpt-3.5-turbo",
                messages: [
                  {role: "system", content: "You are an expert open source project reviewer."},
                  {role: "user", content: $prompt}
                ],
                max_tokens: 500
              }'
            )

            RESPONSE=$(curl -s https://api.openai.com/v1/chat/completions \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $OPENAI_API_KEY" \
              -d "$DATA")
            echo "OpenAI raw response: $RESPONSE"
            SUMMARY=$(echo "$RESPONSE" | jq -r '.choices[0].message.content')

            gh issue comment "$ISSUE_NUMBER" --repo "$REPO" --body "### OpenAI Summary\n$SUMMARY"
            gh issue edit "$ISSUE_NUMBER" --repo "$REPO" --add-label "copilot-reviewed"
          done
