name: Generate Test Instructions on Project Card Done

on:
  project_card:
    types: [moved]

jobs:
  generate-test-instructions:
    runs-on: ubuntu-latest
    steps:
      - name: Debug event payload and column name
        run: |
          echo "Column name is: '${{ github.event.project_card.column_name }}'"
          cat $GITHUB_EVENT_PATH

      - name: Check if column is Done (case-insensitive, trims spaces)
        id: check
        run: |
          COL="${{ github.event.project_card.column_name }}"
          # Remove leading/trailing spaces and make lowercase
          COL_CLEAN=$(echo "$COL" | tr -d '\r' | xargs | tr '[:upper:]' '[:lower:]')
          echo "Normalized column: '$COL_CLEAN'"
          if [[ "$COL_CLEAN" != "done" ]]; then
            echo "Not in Done column. Skipping."
            exit 78
          fi

      - name: Get issue info
        id: issue
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ISSUE_URL="${{ github.event.project_card.content_url }}"
          if [[ -z "$ISSUE_URL" ]]; then
            echo "No linked issue. Skipping."
            exit 0
          fi
          curl -sSL -H "Authorization: token $GH_TOKEN" "$ISSUE_URL" > issue.json
          echo "number=$(jq .number issue.json)" >> $GITHUB_OUTPUT
          echo "title=$(jq -r .title issue.json)" >> $GITHUB_OUTPUT
          echo "body=$(jq -r .body issue.json)" >> $GITHUB_OUTPUT
          echo "repo=$(jq -r .repository_url issue.json | awk -F'repos/' '{print $2}')" >> $GITHUB_OUTPUT

      - name: Generate test instructions with OpenAI
        id: openai
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          PROMPT="Generate concise, bullet-pointed test instructions suitable for browser agent testing for the following GitHub issue.\nTitle: ${{ steps.issue.outputs.title }}\nDescription: ${{ steps.issue.outputs.body }}"
          RESPONSE=$(curl -sS https://api.openai.com/v1/chat/completions \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -d '{
              "model":"gpt-4o",
              "messages":[{"role":"user","content":"'"$PROMPT"'"}],
              "max_tokens":300
            }')
          INSTRUCTIONS=$(echo "$RESPONSE" | jq -r '.choices[0].message.content')
          echo "instructions=$INSTRUCTIONS" >> $GITHUB_OUTPUT

      - name: Comment on issue with test instructions
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          COMMENT="**BROWSER AGENT TESTING INSTRUCTIONS**\n\n${{ steps.openai.outputs.instructions }}"
          ISSUE_NUMBER=${{ steps.issue.outputs.number }}
          REPO=${{ steps.issue.outputs.repo }}
          curl -sSL -X POST \
            -H "Authorization: token $GH_TOKEN" \
            -H "Content-Type: application/json" \
            -d "{\"body\":\"$COMMENT\"}" \
            "https://api.github.com/repos/$REPO/issues/$ISSUE_NUMBER/comments"
