name: Generate Test Instructions on ProjectV2 Done

on:
  project_v2_item:
    types: [edited]

jobs:
  generate-test-instructions:
    runs-on: ubuntu-latest
    steps:
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install graphql-request node-fetch@2

      - name: Generate and post browser agent test instructions if Done
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PROJECT_ITEM_ID: ${{ github.event.project_v2_item.node_id }}
        run: |
          node <<'EOF'
          const { request, gql } = require('graphql-request');
          const fetch = require('node-fetch');
          const projectItemId = process.env.PROJECT_ITEM_ID;
          const githubToken = process.env.GITHUB_TOKEN;
          const openaiKey = process.env.OPENAI_API_KEY;

          const endpoint = 'https://api.github.com/graphql';
          const headers = {
            Authorization: `bearer ${githubToken}`,
            'Content-Type': 'application/json',
          };

          // Step 1: Fetch project item details, including field values and content (issue)
          const query = gql`
            query($id: ID!) {
              node(id: $id) {
                ... on ProjectV2Item {
                  content {
                    ... on Issue {
                      number
                      title
                      body
                      repository {
                        name
                        owner { login }
                      }
                    }
                  }
                  fieldValues(first: 20) {
                    nodes {
                      ... on ProjectV2ItemFieldSingleSelectValue {
                        name
                        field {
                          ... on ProjectV2SingleSelectField {
                            name
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          `;

          (async () => {
            const data = await request(endpoint, query, { id: projectItemId }, headers);
            const item = data.node;
            const issue = item.content;

            if (!issue || !issue.number) {
              console.log('No linked issue found for this project item.');
              process.exit(0);
            }

            // Step 2: Check if the status/select field is "Done"
            const statusField = item.fieldValues.nodes.find(
              (n) =>
                n.field &&
                (n.field.name === 'Status' || n.field.name === 'Column' || n.field.name === 'Stage')
            );
            if (!statusField || statusField.name.toLowerCase() !== 'done') {
              console.log('Project item is not in the "Done" column. Skipping.');
              process.exit(0);
            }

            // Step 3: Send prompt to OpenAI
            const prompt = `Generate concise, bullet-pointed test instructions suitable for browser agent testing for the following GitHub issue.\nTitle: ${issue.title}\nDescription: ${issue.body}`;
            const openaiRes = await fetch('https://api.openai.com/v1/chat/completions', {
              method: 'POST',
              headers: {
                Authorization: `Bearer ${openaiKey}`,
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({
                model: 'gpt-4o',
                messages: [{ role: 'user', content: prompt }],
                max_tokens: 300,
              }),
            }).then((res) => res.json());

            const testInstructions =
              openaiRes.choices?.[0]?.message?.content?.trim() || 'No test instructions generated.';

            // Step 4: Post comment on the issue
            const issueCommentUrl = `https://api.github.com/repos/${issue.repository.owner.login}/${issue.repository.name}/issues/${issue.number}/comments`;
            const commentBody = `**BROWSER AGENT TESTING INSTRUCTIONS**\n\n${testInstructions}`;
            await fetch(issueCommentUrl, {
              method: 'POST',
              headers: {
                Authorization: `Bearer ${githubToken}`,
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({ body: commentBody }),
            });

            console.log('Posted test instructions comment on issue #' + issue.number);
          })();
          EOF
